" vim: ft=vim foldmethod=marker
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
let g:vim_plugged_dir= g:vim_home . "/plugged"
call plug#begin( g:vim_plugged_dir )
"===================Plug loading starts========================================

"-------------------------------------------------------------------------------
"                                 readability                                  "
"-------------------------------------------------------------------------------

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } "{{{
" F4 and Ctrl-4
nmap <F4>   :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1

" auto start nerd tree when no file is open, conflicts with startify
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" automatically close vim when last window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Automatically delete the buffer of the file you just deleted with NerdTree:
let NERDTreeAutoDeleteBuffer = 1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" find current file
nnoremap <silent> <Leader>= :NERDTreeFind<CR>

Plug 'Xuyuanp/nerdtree-git-plugin'

" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName    = 1
let g:NERDTreePatternMatchHighlightFullName  = 1
let g:NERDTreeSyntaxDisableDefaultExtensions = 1
let g:NERDTreeSyntaxEnabledExtensions = ['yml', 'ex', 'exs', 'js', 'css', 'sass']
let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['ex'] = 'AE403F'

" }}}

""" {{{ Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
let g:tagbar_type_elixir = {
   \ 'ctagstype' : 'elixir',
   \ 'kinds' : [
       \ 'p:protocols',
       \ 'm:modules',
       \ 'e:exceptions',
       \ 'y:types',
       \ 'd:delegates',
       \ 'f:functions',
       \ 'c:callbacks',
       \ 'a:macros',
       \ 't:tests',
       \ 'i:implementations',
       \ 'o:operators',
       \ 'r:records'
   \ ],
   \ 'sro' : '.',
   \ 'kind2scope' : {
       \ 'p' : 'protocol',
       \ 'm' : 'module'
   \ },
   \ 'scope2kind' : {
       \ 'protocol' : 'p',
       \ 'module' : 'm'
   \ },
   \ 'sort' : 0
\ }
nmap <F5> :TagbarToggle<CR>
" }}}

Plug 'vim-airline/vim-airline' " {{{
set noshowmode
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'INSERT',
    \ 'R'  : 'REPLACE',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'VL',
    \ '' : 'VB',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_section_x='%l,%c%V %3p%%'
let g:airline_section_z='%{&filetype}'
let g:airline_section_error=''
let g:airline_section_warning=''
let g:airline_theme='dark'
let g:airline#extensions#hunks#enabled = 0
" }}}

" theme
Plug 'lifepillar/vim-gruvbox8'
" Plug 'KeitaNakamura/neodark.vim'

" dim inactive window
Plug 'blueyed/vim-diminactive'

"-------------------------------------------------------------------------------
"                                 operability                                  "
"-------------------------------------------------------------------------------

Plug 'airblade/vim-rooter'
let g:rooter_targets = '*'
let g:rooter_silent_chdir = 1

" multiple highlights <leader>k, clear with <leader>K
Plug 'lfv89/vim-interestingwords'

" comment / uncomment, context aware
Plug 'Shougo/context_filetype.vim', { 'for': 'vue' }
Plug 'tyru/caw.vim' " {{{
" F9 and Alt-9
vmap <F9> gcc
nmap <F9> gcc
vmap <A-9> gcc
nmap <A-9> gcc
" }}}

" make stuff organized
Plug 'junegunn/vim-easy-align' "{{{
vmap <Enter> <Plug>(EasyAlign)
nmap ga      <Plug>(EasyAlign)
" }}}

" distraction free writing
Plug 'junegunn/goyo.vim',  { 'on': 'Goyo', 'for': 'markdown' }
let g:goyo_height='100%'

" drawings
Plug 'vim-scripts/DrawIt', { 'on': 'DrawIt' }

" use c-h/j/k/l for split navigation, no matter in vim or tmux
Plug 'christoomey/vim-tmux-navigator'

" the pope gang...
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'
let g:projectionist_heuristics = {
      \ "mix.exs": {
      \   "lib/*.ex":        { "alternate": "test/{}_test.exs", "type": "code" },
      \   "test/*_test.exs": { "alternate": "lib/{}.ex",        "type": "test" },
      \   "priv/repo/migrations/*.exs": { "type": "migration" },
      \ },
      \ "tasks/*.yml": {
      \   "tasks/*.yml":       { "type": "task",    "alternate": "defaults/{}.yml" },
      \   "defaults/main.yml": { "type": "default", "alternate": "tasks/main.yml"  },
      \ },
      \ }

Plug 'airblade/vim-gitgutter', { 'for': ['yaml', 'elixir', 'ansible.yaml', 'vim' ] }

Plug 'janko-m/vim-test' " {{{
nmap <silent> <leader>t :TestNearest<CR>
let test#strategy = "dispatch"
" }}}

" {{{ Plug ale
if has("nvim") || version > 800
  Plug 'w0rp/ale', { 'for': ['elixir', 'json'] }
  let g:ale_open_list            = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_lint_on_enter        = 0
  let g:ale_lint_on_save         = 1
  let g:ale_set_highlights       = 0

  Plug 'GrzegorzKozub/vim-elixirls', { 'do': ':ElixirLsCompileSync' }
  let g:ale_elixir_elixir_ls_release = expand( g:vim_plugged_dir ) . '/vim-elixirls/elixir-ls/release'
  " https://github.com/JakeBecker/elixir-ls/issues/54
  let g:ale_elixir_elixir_ls_config = { 'elixirLS': { 'dialyzerEnabled': v:false } }

  let g:ale_linters = {}
  let g:ale_linters.elixir = [ 'credo', 'elixir-ls' ]
  autocmd FileType elixir,eelixir nnoremap <C-]> :ALEGoToDefinition<CR>
  autocmd FileType elixir,eelixir nnoremap <C-\> :ALEFindReferences<CR>
endif
" Plug 'slashmili/alchemist.vim'
" }}}

" Plug deoplete {{{
Plug 'wellle/tmux-complete.vim'
if has("nvim") || version > 800
  if has("nvim")
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'ncm2/float-preview.nvim'
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif
  let g:deoplete#enable_at_startup       = 1
  let g:deoplete#omni#min_pattern_length = 3
  let g:deoplete                         = g:vim_home . '/.cache/deoplete'
  let g:deoplete#enable_auto_delimiter   = 1
  autocmd FileType *        call deoplete#custom#source('ultisnips', 'rank', 1000)
  autocmd FileType ledger   call deoplete#custom#var('omni', 'input_patterns', { 'ledger': '^\s\+\(\S \S\|\S\|:\)\+' })
  autocmd FileType *        call deoplete#custom#option({ 'ignore_sources': { '_': ['around', 'omni', 'file'] } })
  autocmd FileType markdown call deoplete#custom#buffer_option('auto_complete', v:false)
else
  Plug 'Shougo/neocomplete.vim'
  let g:neocomplete#enable_at_startup           = 1
  let g:neocomplete#enable_smart_case           = 1
  let g:neocomplete#omni#min_pattern_length        = 2
  let g:neocomplete#sources#omni#input_patterns = {}
  let g:neocomplete#data_directory              = g:vim_home . '/.cache/neocomplete'
  let g:neocomplete#enable_auto_delimiter       = 1
endif
" }}}

Plug 'SirVer/ultisnips' " {{{
" add personal snippet directory to search path, note that snippets is reserved and could not be used
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[ g:vim_home . '/snips' ]
let g:UltiSnipsEditSplit= 'vertical'
" }}} Plug 'SirVer/ultisnips' "

" Plug fzf {{{
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
" Plug '~/.zplug/repos/junegunn/fzf'
Plug 'junegunn/fzf.vim'

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()

" set grepprg=ag\ --nogroup\ --nocolor
set grepprg=rg\ --vimgrep
command! -bang -nargs=* Rg call fzf#vim#grep(
      \ "rg --column --no-heading --fixed-strings --color=always --smart-case --colors 'path:fg:green' --colors 'line:fg:yellow' --colors 'line:style:bold' "
      \ . shellescape(<q-args>),
      \ 1, {'options': '-e --color hl:210,hl+:196 --no-hscroll --delimiter : --nth 3..'}, <bang>0 )

nnoremap <silent> <leader>/ :Rg<CR>
nnoremap <silent> <leader>n :Rg <C-R><C-W><CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>f :ProjectFiles<CR>
nnoremap <silent> <leader>s :Snippets<CR>

" imap <C-x><C-f> <plug>(fzf-complete-file-ag)
" imap <C-x><C-l> <plug>(fzf-complete-line)

let g:fzf_colors = { 'fg': ['fg', 'Comment'], 'bg': ['bg', 'Normal'] }

let g:fzf_history_dir = $HOME . "/.backup/fzf_history"
let g:fzf_layout = { 'window': 'enew' }
if !isdirectory( g:fzf_history_dir )
  call mkdir( g:fzf_history_dir , "p")
endif
" }}}

Plug 'csexton/trailertrash.vim', { 'on': 'TrailerTrim' }

Plug 'terryma/vim-multiple-cursors'

"-------------------------------------------------------------------------------
"                                  file types                                  "
"-------------------------------------------------------------------------------
"
" support for ansible, html5, elixir, vue, terraform file types and more
Plug 'sheerun/vim-polyglot'
" prevent syntax from stop working randomly
autocmd FileType vue syntax sync fromstart
" prevent vim from slowing down when editing vue
let g:vue_pre_processors = ['pug', 'sass']
let g:vim_markdown_frontmatter = 1

Plug 'ledger/vim-ledger', { 'for' : 'ledger' }
autocmd FileType ledger set fdm=indent foldlevel=0 shiftwidth=4
autocmd FileType ledger nnoremap j jzz
autocmd FileType ledger nnoremap k kzz
autocmd FileType ledger nnoremap G Gzz

Plug 'shmargum/vim-sass-colors', {'for': ['sass', 'scss']}

" vim-markdown has issues and is slow
" Plug 'plasticboy/vim-markdown'
" let g:vim_markdown_folding_style_pythonic = 1
" let g:vim_markdown_strikethrough = 1

" Plug 'vimwiki/vimwiki'
" let g:vimwiki_list = [{'path': '~/doc/wiki/', 'syntax': 'markdown', 'ext': '.md', 'auto_diary_index': 1}]
" let g:vimwiki_folding = 'expr'
" let g:vimwiki_table_mappings = 0
" let g:vimwiki_global_ext = 0
" nnoremap <Leader>tt :VimwikiToggleListItem<CR>

"===================Plug loading ends==========================================
call plug#end()

"if has 256 colour, use a 256 colour theme
if $TERM =~ '^\(xterm\|screen\|tmux\)' || $TERM =~ '256color$' || has("gui_running")
    if !has("gui_running")
        set t_Co=256
    endif
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
    " colorscheme neodark
    colorscheme gruvbox8
else
    colorscheme tango
endif


" vim: ft=vim foldmethod=marker
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"

call plug#begin( g:vim_home . "/plugged")
"===================Plug loading starts========================================

"-------------------------------------------------------------------------------
"                                 readability                                  "
"-------------------------------------------------------------------------------

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } "{{{
nmap <F4>   :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1

" auto start nerd tree when no file is open, conflicts with startify
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" automatically close vim when last window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Automatically delete the buffer of the file you just deleted with NerdTree:
let NERDTreeAutoDeleteBuffer = 1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" find current file
nnoremap <silent> <Leader>z :NERDTreeFind<CR>

Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" }}}

Plug 'vim-airline/vim-airline' " {{{
set noshowmode
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'INSERT',
    \ 'R'  : 'REPLACE',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'VL',
    \ '' : 'VB',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_section_x='%{&filetype}'
let g:airline_section_z='%l,%c%V %3p%%'
let g:airline_section_error=''
let g:airline_section_warning=''
let g:airline_theme='dark'
" }}}

" theme
Plug 'morhetz/gruvbox'

" dim inactive window
Plug 'blueyed/vim-diminactive'

"-------------------------------------------------------------------------------
"                                 operability                                  "
"-------------------------------------------------------------------------------

Plug 'airblade/vim-rooter'
let g:rooter_targets = '*'
let g:rooter_silent_chdir = 1

" multiple highlights <leader>k, clear with <leader>K
Plug 'lfv89/vim-interestingwords'

" comment / uncomment, context aware
Plug 'Shougo/context_filetype.vim'
Plug 'tyru/caw.vim' " {{{
vmap <F9> gcc
nmap <F9> gcc
" }}}

" make stuff organized
Plug 'junegunn/vim-easy-align' "{{{
vmap <Enter> <Plug>(EasyAlign)
nmap ga      <Plug>(EasyAlign)
" }}}

" distraction free writing
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }

" drawings
Plug 'vim-scripts/DrawIt', { 'on': 'DrawIt' }

" Split in tmux
" Plug 'benmills/vimux'   " {{{
" map tr :VimuxPromptCommand<CR>
" map tl :VimuxRunLastCommand<CR>
" map tz :VimuxZoomRunner<CR>

" use c-h/j/k/l for split navigation, no matter in vim or tmux
Plug 'christoomey/vim-tmux-navigator'
if has('nvim')
    nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif
" }}}

" parentheses and ends
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'

Plug 'tpope/vim-fugitive'

Plug 'janko-m/vim-test' " {{{
Plug 'tpope/vim-dispatch'
nmap <silent> <leader>t :TestFile<CR>
let test#stratgy = 'dispatch_background'
" }}}

Plug 'vim-scripts/openssl.vim'

" }}}

Plug 'Konfekt/FastFold'         " fix for vim's slow fdm=syntax

" Plug deoplete {{{
if has("nvim")
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
elseif version > 800
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
else
  Plug 'Shougo/neocomplete.vim'
endif
let g:deoplete#enable_at_startup          = 1
let g:deoplete#omni#min_pattern_length    = 3
let g:deoplete#omni#input_patterns        = {}
let g:deoplete#omni#input_patterns.ruby   = ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::']
let g:deoplete#omni#input_patterns.ledger = '^\s\+\(\S \S\|\S\|:\)\+'
let g:deoplete                            = '~/.config/nvim/.cache/deoplete'
let g:deoplete#enable_auto_delimiter      = 1
let g:neocomplete#enable_at_startup       = 1
let g:neocomplete#enable_smart_case       = 1
autocmd FileType eruby let b:deoplete_disable_auto_complete=1
" }}}

Plug 'SirVer/ultisnips' " {{{
" add personal snippet directory to search path, note that snippets is reserved and could not be used
let g:UltiSnipsSnippetDirectories=["snips", "UltiSnips"]
let g:UltiSnipsSnippetsDir= g:vim_home . '/snips'
let g:UltiSnipsEditSplit= 'vertical'
" }}} Plug 'SirVer/ultisnips' "

" Plug fzf {{{
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug '~/.zplug/repos/junegunn/fzf'
Plug 'junegunn/fzf.vim'

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()

set grepprg=ag\ --nogroup\ --nocolor 
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--no-hscroll --delimiter : --nth 4..'}, <bang>0)

function! SearchWordWithAg()
  execute 'Ag' expand('<cword>')
endfunction

function! SearchSelectionWithAg() range
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  let old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', old_reg, old_regtype)
  let &clipboard = old_clipboard
  execute 'Ag' selection
endfunction

nnoremap <silent> <leader>/ :Ag<CR>
vnoremap <silent> <leader>/ :call SearchSelectionWithAg()<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>f :ProjectFiles<CR>
nnoremap <silent> <leader>s :Snippets<CR>

" imap <C-x><C-f> <plug>(fzf-complete-file-ag)
" imap <C-x><C-l> <plug>(fzf-complete-line)

let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

let g:fzf_history_dir = $HOME . "/.backup/fzf_history"
let g:fzf_layout = { 'window': 'enew' }
if !isdirectory( g:fzf_history_dir )
  call mkdir( g:fzf_history_dir , "p")
endif


" }}}

Plug 'mhinz/vim-startify' " {{{
let g:startify_lists = [
      \ { 'type': 'dir',       'header': [   'MRU '. getcwd()] },
      \ { 'type': 'files',     'header': [   'MRU']            },
      \ { 'type': 'sessions',  'header': [   'Sessions']       },
      \ { 'type': 'bookmarks', 'header': [   'Bookmarks']      },
      \ ]
let g:startify_bookmarks = [ '~/.vimrc.plug' ]
" }}}

Plug 'csexton/trailertrash.vim'

"-------------------------------------------------------------------------------
"                                  file types                                  "
"-------------------------------------------------------------------------------

" support for ansible, html5, elixir, vue, terraform file types and more
Plug 'sheerun/vim-polyglot'
" prevent syntax from stop working randomly
autocmd FileType vue syntax sync fromstart
autocmd FileType graphql set fdm=syntax
" prevent vim from slowing down when editing vue
" let g:vue_disable_pre_processors=1

Plug 'amadeus/vim-mjml', { 'for': 'mjml' }


Plug 'ledger/vim-ledger', { 'for' : 'ledger' }
autocmd FileType ledger nnoremap j jzz
autocmd FileType ledger nnoremap k kzz
autocmd FileType ledger nnoremap G Gzz

autocmd BufNewFile,BufRead *.markdown,*mkd setfiletype octopress
Plug 'tangledhelix/vim-octopress', {'for' : 'octopress'}

Plug 'slashmili/alchemist.vim',    { 'for': 'elixir' }

Plug 'gorodinskiy/vim-coloresque', {'for': ['css', 'sass', 'scss']}

Plug 'ekalinin/Dockerfile.vim'

"===================Plug loading ends==========================================
call plug#end()

"if has 256 colour, use a 256 colour theme
if $TERM =~ '^\(xterm\|screen\|tmux\)' || $TERM =~ '256color$' || has("gui_running")
    if !has("gui_running")
        set t_Co=256
    endif
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
    colorscheme gruvbox
    " colorscheme Tomorrow-Night-Eighties
    " colorscheme SpacegrayEighties
else
    colorscheme tango
endif

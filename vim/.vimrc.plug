" vim: ft=vim foldmethod=marker
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
let g:vim_plugged_dir= g:vim_home . "/plugged"
call plug#begin( g:vim_plugged_dir )
"===================Plug loading starts========================================

"-------------------------------------------------------------------------------
"                                 readability                                  "
"-------------------------------------------------------------------------------
" NERDTree............................................................... {{{1
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
let g:NERDTreeHighlightCursorline = 1
nmap <F4>   :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1

" auto start nerd tree when no file is open, conflicts with startify
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" automatically close vim when last window is NERDTree
" https://stackoverflow.com/questions/2066590/automatically-quit-vim-if-nerdtree-is-last-and-only-buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Automatically delete the buffer of the file you just deleted with NerdTree:
let NERDTreeAutoDeleteBuffer = 1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" find current file
nnoremap <silent> <Leader>= :NERDTreeFind<CR>

Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName    = 1
let g:NERDTreePatternMatchHighlightFullName  = 1
let g:NERDTreeSyntaxDisableDefaultExtensions = 1
let g:NERDTreeSyntaxEnabledExtensions = ['yml', 'ex', 'exs', 'eex', 'leex', 'slim', 'slimleex', 'slime', 'js', 'css', 'sass']
let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['ex'] = 'AE403F'
" let g:NERDTreeQuitOnOpen = 1
" ....................................................................... }}}1

Plug 'vim-airline/vim-airline' " {{{
set noshowmode
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'INSERT',
    \ 'R'  : 'REPLACE',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'VL',
    \ '' : 'VB',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_section_x='%l,%c%V %3p%%'
let g:airline_section_z='%{&filetype}'
let g:airline_section_error=''
let g:airline_section_warning=''
let g:airline_theme='dark'
let g:airline#extensions#hunks#enabled = 0
" }}}

" theme
Plug 'lifepillar/vim-gruvbox8'
let g:gruvbox_material_enable_italic = 1

" dim inactive window
Plug 'blueyed/vim-diminactive'

" indentation helper
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesToggle' }
nmap <silent> <Leader><tab> :IndentLinesToggle<CR>

"-------------------------------------------------------------------------------
"                                 operability                                  "
"-------------------------------------------------------------------------------
" comment / uncomment, context aware
Plug 'tyru/caw.vim' " {{{
Plug 'Shougo/context_filetype.vim', { 'for': 'vim' }
autocmd FileType slime let b:caw_oneline_comment = '/'
" F9 and Alt-9
vmap <F9> gcc
nmap <F9> gcc
" }}}

" make stuff organized
Plug 'junegunn/vim-easy-align' "{{{
vmap <Enter> <Plug>(EasyAlign)
nmap ga      <Plug>(EasyAlign)
" }}}

" distraction free writing
Plug 'junegunn/goyo.vim',  { 'on': 'Goyo', 'for': 'markdown' }
let g:goyo_height='100%'
nmap <Leader>g :Goyo<CR>

" drawings
Plug 'vim-scripts/DrawIt', { 'on': 'DrawIt' }

" use c-h/j/k/l for split navigation, no matter in vim or tmux
Plug 'christoomey/vim-tmux-navigator'

" Snips.............................................................. {{{1
Plug 'SirVer/ultisnips'
" add personal snippet directory to search path, note that snippets is reserved and could not be used
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[ g:vim_home . '/snips' ]
let g:UltiSnipsEditSplit= 'vertical'
if has("nvim")
  Plug 'quangnguyen30192/cmp-nvim-ultisnips'
endif
" ....................................................................... }}}1

" FZF.................................................................... {{{1
if has("mac")
  Plug '/opt/homebrew/opt/fzf'
endif
Plug 'junegunn/fzf.vim'

let $FZF_DEFAULT_OPTS='-e --info=inline --reverse --preview-window=:hidden'
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'GFiles' s:find_git_root()

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'dir': FindRootDirectory(), 'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

set grepprg=rg\ --vimgrep
if v:version >= 802 || has("nvim")
    let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.5, 'border': 'rounded' } }
else
    let g:fzf_layout = { 'window': 'belowright 35new' }
endif
if &background == "light"
    let $BAT_THEME="gruvbox-light"
endif
" with g:fzf_history_dir c-p/n can recall last query
let g:fzf_history_dir = $HOME . "/.backup/fzf_history"
if !isdirectory( g:fzf_history_dir )
  call mkdir( g:fzf_history_dir , "p")
endif

nnoremap <silent> <leader>/ :RG<CR>
nnoremap <silent> <leader>n :RG <C-R><C-W><CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>s :Snippets<CR>
nnoremap <silent> <leader>T :Tags<CR>
nnoremap <silent> <leader>t :BTags<CR>
inoremap <silent> ,, <C-O>:Snippets<CR>

" imap <C-x><C-f> <plug>(fzf-complete-file-ag)
" imap <C-x><C-l> <plug>(fzf-complete-line)
" ....................................................................... }}}1

" Deoplete............................................................... {{{1
Plug 'wellle/tmux-complete.vim'
if has("nvim")
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  " Plug 'hrsh7th/cmp-path'
  " Plug 'hrsh7th/cmp-cmdline'
  Plug 'hrsh7th/nvim-cmp'
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
  Plug 'deoplete-plugins/deoplete-dictionary'
  set dictionary+=/usr/share/dict/words
  let g:deoplete#enable_at_startup       = 1
  let g:deoplete#omni#min_pattern_length = 3
  let g:deoplete                         = g:vim_home . '/.cache/deoplete'
  let g:deoplete#enable_auto_delimiter   = 1
endif

" ....................................................................... }}}1

" Vimwiki................................................................ {{{1
if has("mac")
  Plug 'vimwiki/vimwiki'
  " always change to the directory of the file
  " so that FZF within the dir works better
  " so that it does not take over tab that is required by ultisnips
  let g:vimwiki_table_mappings = 0
  let g:vimwiki_auto_chdir     = 1
  let g:vimwiki_hl_cb_checked  = 2
  let g:vimwiki_global_ext     = 0
  let g:vimwiki_create_link    = 0
  let g:vimwiki_list = [{'path': '~/wiki/', 'syntax': 'markdown', 'ext': '.md', 'auto_diary_index': 1}]
  autocmd FileType vimwiki setlocal spell
  autocmd FileType vimwiki nnoremap tt :VimwikiToggleListItem<CR>

  Plug 'roylez/zwiki'

  " start up menu ......................................................... {{{2
  Plug 'mhinz/vim-startify', { 'on': 'Startify' }
  autocmd User Startified setlocal cursorline

  let g:startify_files_number = 5
  let g:startify_enable_special = 0
  let g:startify_session_persistence = 1
  let g:startify_session_before_save = [ 'silent! tabdo NERDTreeClose' ]
  let g:startify_lists = [
        \ { 'type': 'commands',  'header': ['      COMMANDS'] },
        \ { 'type': 'sessions',  'header': ['      SESSIONS' ] },
        \ { 'type': 'files',     'header': ['      RECENT' ] },
        \ { 'type': 'bookmarks', 'header': ['      BOOKMARKS'] } ]
  let g:startify_bookmarks = [
        \ { 't': '~/wiki/TODO.md' },
        \ { 'c': '~/.vimrc' },
        \ { 'p': '~/.vimrc.plug' },
        \ { 's': '~/.zshrc' } ]
  let g:startify_commands = [
        \ { 'b': ['BLANK',      'PasteEdit'            ]},
        \ { 'B': ['CLIPBOARD',  'PasteEdit +norm\ "+P' ]},
        \ { 'z': ['Zettel', 'ZwikiNew +norm\ G"+p'  ]} ]

  let g:startify_custom_header = "startify#center(split(system('bat --decorations=always --style=grid ~/wiki/TODO.md'), '\n'))"
  " autocmd VimEnter * let t:startify_new_tab = 1
  " make startify start on every new tab
  " autocmd BufEnter *
  "      \ if !exists('t:startify_new_tab') && empty(expand('%')) |
  "      \   let t:startify_new_tab = 1 |
  "      \   Startify |
  "      \ endif
  " ....................................................................... }}}2
endif
" ....................................................................... }}}1

" tpope gang............................................................. {{{1
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
let g:dispatch_no_maps = 1
Plug 'tpope/vim-projectionist'
let g:projectionist_heuristics = {
      \ "mix.exs": {
      \   "lib/*.ex":        { "alternate": "test/{}_test.exs", "type": "code" },
      \   "test/*_test.exs": { "alternate": "lib/{}.ex",        "type": "test" },
      \   "lib/*.html.heex": { "alternate": "lib/{}.ex",        "type": "template" },
      \   "priv/repo/migrations/*.exs": { "type": "migration" },
      \ },
      \ "tasks/*.yml": {
      \   "tasks/*.yml":       { "type": "task",    "alternate": "defaults/{}.yml" },
      \   "defaults/main.yml": { "type": "default", "alternate": "tasks/main.yml"  },
      \ },
      \ }

Plug 'tpope/vim-surround'
autocmd FileType markdown,vimwiki let b:surround_{char2nr('i')} = "*\r*"
autocmd FileType markdown,vimwiki let b:surround_{char2nr('b')} = "**\r**"
autocmd FileType markdown,vimwiki let b:surround_{char2nr('c')} = "``` \1language: \1\r```"
" ....................................................................... }}}1

Plug 'airblade/vim-gitgutter', { 'for': ['yaml', 'elixir', 'ansible.yaml', 'vim' ] }
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" {{{ ale
if has("nvim")
    Plug 'neovim/nvim-lspconfig'
elseif version > 800
    Plug 'w0rp/ale', { 'for': ['elixir', 'json', 'markdown', 'markdown.scratch'] }
    let g:ale_open_list            = 1
    let g:ale_lint_on_text_changed = 1
    let g:ale_lint_on_enter        = 0
    let g:ale_lint_on_save         = 1
    " let g:ale_set_highlights       = 0

    let g:ale_elixir_elixir_ls_release = expand( '~/workspace/opt/elixir-ls' )
    " https://github.com/JakeBecker/elixir-ls/issues/54
    let g:ale_elixir_elixir_ls_config = { 'elixirLS': { 'dialyzerEnabled': v:false } }

    let g:ale_linters = {}
    let g:ale_linters.elixir   = [ 'elixir-ls' ]
    let g:ale_linters.markdown = [ 'languagetool' ]
    autocmd FileType elixir,eelixir nnoremap <C-]> :ALEGoToDefinition<CR>
    autocmd FileType elixir,eelixir nnoremap <C-\> :ALEFindReferences<CR>
    autocmd FileType elixir,eelixir nnoremap K :ALEHover<CR>
endif
" }}}

Plug 'liuchengxu/vim-which-key'
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

" AsyncTasks............................................................. {{{1
Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'
let g:asyncrun_open = 6
let g:asynctasks_term_pos = "dispatch"

function! s:dispatch_runner(opts)
    execute "Dispatch " . a:opts.cmd
endfunction
let g:asyncrun_runner = get(g:, 'asyncrun_runner', {})
let g:asyncrun_runner.dispatch = function('s:dispatch_runner')
let g:asyncrun_rootmarks = ['.git', '.svn', '.root', '.project', '.hg', '.gitignore']

function! s:fzf_sink(what)
    let p1 = stridx(a:what, '<')
    if p1 >= 0
        let name = strpart(a:what, 0, p1)
        let name = substitute(name, '^\s*\(.\{-}\)\s*$', '\1', '')
        if name != ''
            exec "AsyncTask ". fnameescape(name)
        endif
    endif
endfunction

function! s:fzf_task()
    let rows = asynctasks#source(&columns * 48 / 100)
    let source = []
    for row in rows
        let name = row[0]
        let source += [name . '  ' . row[1] . '  : ' . row[2]]
    endfor
    let opts = { 'source': source, 'sink': function('s:fzf_sink'),
                \ 'options': '+m --nth 1 --prompt "TASKS> " ' }
    if exists('g:fzf_layout')
        for key in keys(g:fzf_layout)
            let opts[key] = deepcopy(g:fzf_layout[key])
        endfor
    endif
    call fzf#run(opts)
endfunction

command! -nargs=0 Tasks call s:fzf_task()
nnoremap <silent> <leader>j :Tasks<CR>
" ....................................................................... }}}1

Plug 'csexton/trailertrash.vim', { 'on': 'TrailerTrim' }
nmap <Leader><backspace> :TrailerTrim<CR>

Plug 'mg979/vim-visual-multi'

Plug 'airblade/vim-rooter'
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_cd_cmd = 'tcd'
let g:rooter_patterns = ['.git', '.gitignore', 'Makefile', 'mix.exs', '.tags', 'readme.md']

"-------------------------------------------------------------------------------
"                                  file types                                  "
"-------------------------------------------------------------------------------
"
" support for ansible, html5, elixir, vue, terraform file types and more
" Plug 'sheerun/vim-polyglot'
" let g:polyglot_disabled = ['slime', 'yaml']
" prevent syntax from stop working randomly
" autocmd FileType vue syntax sync fromstart
" prevent vim from slowing down when editing vue
" let g:vue_pre_processors = ['pug', 'sass']
" let g:vim_markdown_frontmatter = 1

Plug 'pearofducks/ansible-vim', { 'for': 'ansible' }
Plug 'vim-crystal/vim-crystal', { 'for': 'crystal' }

if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

Plug 'ledger/vim-ledger',       { 'for': 'ledger'  }
autocmd FileType ledger setlocal fdm=indent foldlevel=0 shiftwidth=4
autocmd FileType ledger nnoremap j jzz
autocmd FileType ledger nnoremap k kzz
autocmd FileType ledger nnoremap G Gzz

Plug 'roylez/vim-slime-syntax'
autocmd BufNewFile,BufRead *.slim,*slime,*.slimleex set ft=slime

Plug 'elixir-editors/vim-elixir'
autocmd FileType elixir,eelixir setlocal shiftwidth=2
autocmd BufNewFile,BufRead *.leex,*.heex setlocal ft=html.eelixir
Plug 'mattn/emmet-vim'

"-------------------------------------------------------------------- nvim stuff 

if has("nvim")
  " Sittin' in a tree
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

"===================Plug loading ends==========================================
call plug#end()

" 256 colour theme....................................................... {{{1
if $TERM =~ '^\(xterm\|screen\|tmux\)' || $TERM =~ '256color$' || has("gui_running")
    colorscheme gruvbox8
else
    colorscheme tango
endif

" ....................................................................... }}}1

" Completion Settings...................................................... {{{1
if !has("nvim")
  call deoplete#custom#var('omni', 'input_patterns', { 'ledger': '^\s\+\(\S \S\|\S\|:\)\+' })
  call deoplete#custom#source('ultisnips', 'rank', 1000)
  call deoplete#custom#source('ultisnips', 'min_pattern_length', 2)
  call deoplete#custom#source('dictionary', 'matchers', ['matcher_head']) " Do not do fuzzy
  call deoplete#custom#source('dictionary', 'sorters', []) " If dictionary is already sorted, no need to sort it again.
  call deoplete#custom#source('dictionary', 'min_pattern_length', 2)
  call deoplete#custom#option({
              \'auto_complete_delay': 5,
              \'check_stderr': v:false,
              \'max_list': 20,
              \'sources': {
              \'_':        ['ultisnips', 'tabnine', 'tmux'],
              \'markdown': ['ultisnips', 'dictionary'],
              \'scratch':  ['ultisnips', 'dictionary'],
              \'vimwiki':  ['ultisnips', 'dictionary'],
              \'ledger':   ['ultisnips', 'tmux'],
              \'ruby':     ['ultisnips', 'tmux']}
  \})
endif
" .................................................................... }}}1

" neovim specific lua settings {{{
if has("nvim")
  lua <<EOLSP
  require'nvim-treesitter.configs'.setup {
    highlight = {
      enable = true,
      disable = {},
    },
    indent = {
      enable = false,
      disable = {},
    },
    ensure_installed = { "yaml", "elixir", "ledger", "vim", "lua", "ruby" },
  }

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  -- buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  end

  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  require'lspconfig'.elixirls.setup{
  cmd = { vim.loop.os_homedir().."/workspace/opt/elixir-ls/language_server.sh" },
  capabilities = capabilities,
  on_attach = on_attach,
  flags = { debounce_text_changes = 150 },
  settings = {
    elixirLS = {
      dialyzerEnabled = true,
    }
    }
  }
EOLSP
  
  lua << EOCMP
    local cmp = require'cmp'

    local cmp_ultisnips_mappings = require("cmp_nvim_ultisnips.mappings")

    cmp.setup({
      snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
          vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
        end,
      },
      window = {
        -- completion = cmp.config.window.bordered(),
        -- documentation = cmp.config.window.bordered(),
      },
      mapping = cmp.mapping.preset.insert({
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.

        ["<Tab>"] = cmp.mapping(
          function(fallback)
            cmp_ultisnips_mappings.expand_or_jump_forwards(fallback)
          end, { "i", "s" }
        ),
        ["<S-Tab>"] = cmp.mapping(
          function(fallback)
            cmp_ultisnips_mappings.jump_backwards(fallback)
          end, { "i", "s" }
        ),

      }),
      sources = cmp.config.sources(
        {
          { name = 'nvim_lsp' },
          { name = 'ultisnips' },
        },
        {
          { name = 'buffer' },
        }
      )
    })
EOCMP
endif
"}}}

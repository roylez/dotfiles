global !p
def to_module(path):
  fn = re.sub(r'\.exs?$', '', os.path.abspath(path))
  mod = '.'.join( [ i.capitalize() for i in re.sub(r'.*/lib/','',fn).split('/') ] )
  return ''.join( [ i.capitalize() for i in mod.split('_') ] )

endglobal

snippet 'requir IEx' "Use IEx to pry"
require IEx; IEx.pry
endsnippet

snippet 'def init' "def init ..." b
@spec init( ${1:args} )  :: { :ok, state :: term } | { :stop, reason :: term }
def init( ${2:args} ) do
  $0
  { :ok, state }
end
endsnippet 

snippet IO.inspect "IO.inspect" b
IO.inspect $1
endsnippet

snippet	defmodule "defmodule" b
defmodule ${1:`!p snip.rv=to_module(path)`} do
  $0
end
endsnippet

snippet defmodule "defmodule" "snip.buffer[snip.line].startswith('  ')" be
defmodule ${1:Module} do
  $0
end
endsnippet

snippet	'def "def function(...)" b
def ${1:function}(${2:...}) do
  $0
end
endsnippet

snippet	imp "import Config" b
import Config

config :$0
endsnippet

snippet 'use Supervisor' "Supervisor" b
use Supervisor

def start_link(arg) do
  Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
end

def init(_) do

  children = [
    # Worker  ( { Worker, [] } )
    # { Worker, [args] }
    # %{ id: Worker, 
    #    type: :worker, 
    #    start: { Worker, :start_lin, [[]] },
    #    restart: ..., shutdown: ... }
    ${2:Module},
  ]
  Supervisor.init(children, strategy: :one_for_one)
end
endsnippet

snippet 'use DynamicSupervisor' "DynamicSupervisor" b
use DynamicSupervisor

def start_link(_) do
  DynamicSupervisor.start_link(__MODULE__, nil, name: __MODULE__)
end

def init(_) do
  DynamicSupervisor.init(strategy: :one_for_one)
end
endsnippet

snippet 'use GenServer' "Genserver" b
use GenServer

def init(state) do
  { :ok, state }
end

def start_link(state) do
  GenServer.start_link(__MODULE__, state, name: ${2:__MODULE__})
end
endsnippet

snippet defmacro "defmacro __using__(_)" b
defmacro __using__(${1:_}) do
  quote do
    $0
  end
end
endsnippet

snippet defver "defp version()" b
defp version() do
  String.trim( File.read!("VERSION") ) <> "+" <> git_sha()
end

defp git_sha() do
  {result, _exit_code} = System.cmd("git", ["rev-parse", "HEAD"])
  String.slice(result, 0, 5)
end$0
endsnippet

snippet defquery "composable query" b
def ${1:query_name}( query \\\\ __MODULE__ ) do
  query |> where([x], ${2:x.abc=true})
end
endsnippet

snippet @der "@derive {...}" b
@derive {${1:Jason.Encoder}, only: ~w($0)a }
endsnippet

snippet @doc "@doc and @spec for a function" b
@doc """
$0
"""
@spec ${1:function}( $2 ) :: $3
endsnippet

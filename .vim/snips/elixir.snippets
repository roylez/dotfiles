snippet pry "Use IEx to pry"
require IEx; IEx.pry
endsnippet

snippet defs "Genserver" b
defmodule ${1:Server} do
  use GenServer

  def init( params) do
    { :ok, state }
  end

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: ${2:__MODULE__})
  end
end
endsnippet

snippet definit "def init ..." b
@spec init( ${1:args} )  :: { :ok, state :: term } | { :stop, reason :: term }
def init( ${2:args} ) do
  $0
  { :ok, state }
end
endsnippet 

snippet ins "IO.inspect" b
IO.inspect $1
endsnippet

snippet	defm "defmodule" b
defmodule ${1:AppModule} do
  $0
end
endsnippet

snippet	config "Mix config" b
use Mix.Config

config :$0
endsnippet

snippet defsup "Supervisor" b
defmodule ${1:App.Supervisor} do
  use Supervisor

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  def init(_) do

    children = [
      # Worker  ( { Worker, [] } )
      # { Worker, [args] }
      # %{ id: Worker, 
      #    type: :worker, 
      #    start: { Worker, :start_lin, [[]] },
      #    restart: ..., shutdown: ... }
      ${2:Module},
    ]
    Supervisor.init(children, strategy: :one_for_one)
  end
  
end
endsnippet

snippet	foldp "folded code block" b
# ${1:comment} {{{
$0
# }}}
endsnippet

snippet context "Context methods create/list/update/delete" b
# ${1:Module} {{{
def create_${1/\w+/\l$0/}(attrs \\\\ %{}) do
  %$1{}
  |> $1.changeset(attrs)
  |> Repo.insert()
end

def list_${1/\w+/\l$0/} do
  $1 |> Repo.all
end

def get_${1/\w+/\l$0/}!(id), do: Repo.get!($1, id)

def update_${1/\w+/\l$0/}(%$1{}=${1/\w+/\l$0/}, attrs) do
  ${1/\w+/\l$0/}
  |> $1.changeset(attrs)
  |> Repo.update()
end

def delete_${1/\w+/\l$0/}(%$1{} = ${1/\w+/\l$0/}) do
  Repo.delete(${1/\w+/\l$0/})
end
# }}}
endsnippet

snippet defjson "define implementation for Poison.Encoder"
defimpl Poison.Encoder, for: ${1:Module} do
  def encode(${2:mod}, opts \\\\ []) do
    %{
      id: $2.id,
      $0
    } |> Poison.Encoder.encode(opts)
  end
end
endsnippet

snippet	defget "get_object(id, preloads \\ [])" b
def get_${1:object}(id, preloads \\\\ ${2:[]})
def get_$1(id, preloads) do
  { :ok, ${1/\w+/\u$0/} |> preload(^preloads) |> Repo.get(id) }
end
endsnippet

snippet	deflist "list_object(filters \\ [])" b
def list_${1:object}(filters \\\\ ${2:[]}) do
  { :ok, ${1/\w+/\u$0/} |> where(^filters) |> Repo.all() }
end
endsnippet

snippet defu "defmacro __using__(_)" b
defmacro __using__(${1:_}) do
  quote do
    $0
  end
end
endsnippet

snippet defver "defp version()" b
defp version() do
  String.trim( File.read!("VERSION") ) <> "+" <> git_sha()
end

defp git_sha() do
  {result, _exit_code} = System.cmd("git", ["rev-parse", "HEAD"])
  String.slice(result, 0, 5)
end$0
endsnippet

snippet defquery "composable query" b
def ${1:query_name}( query \\\\ __MODULE__ ) do
  query |> where([x], ${2:x.abc=true})
end
endsnippet

snippet @der "@derive {...}" b
@derive {${1:Jason.Encoder}, only: ~w($0)a }
endsnippet

snippet @doc "@doc ...." b
@doc """
$0
"""
@spec ${1:function}( $2 ) :: $3
endsnippet


snippet debug "Use IEx to pry"
require IEx; IEx.pry
endsnippet

snippet defs "Genserver" b
defmodule ${1:Server} do
  use GenServer

  def init( params) do
    { :ok, state }
  end

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: ${2:__MODULE__})
  end
end
endsnippet

snippet definit "def init ..." b
@spec init( ${1:args} )  :: { :ok, state :: term } | { :stop, reason :: term }
def init( ${2:args} ) do
  $0
  { :ok, state }
end
endsnippet 

snippet ins "IO.inspect" b
IO.inspect $1
endsnippet

snippet	defm "defmodule" b
defmodule ${1:AppModule} do
  $0
end
endsnippet

snippet	config "Mix config" b
use Mix.Config

config :$0
endsnippet

snippet defsup "Supervisor" b
defmodule ${1:App.Supervisor} do
  use Supervisor

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  def init(_) do

    children = [
      # Worker  ( { Worker, [] } )
      # { Worker, [args] }
      # %{ id: Worker, 
      #    type: :worker, 
      #    start: { Worker, :start_lin, [[]] },
      #    restart: ..., shutdown: ... }
      ${2:Module},
    ]
    Supervisor.init(children, strategy: :one_for_one)
  end
  
end
endsnippet

snippet	foldp "folded code block" b
# ${1:comment} {{{
$0
# }}}
endsnippet

#!/usr/bin/env ruby
# encoding: utf-8
# Description: Print a calendar in like github commit history view. Inspired by git-cal
#
#     https://github.com/k4rthik/git-cal
#
require 'date'

def git_stat
  res = %x{ git log --no-merges --pretty=format:"%at" --since="13 months"}
  res = res.split("\n").map{|i| Time.at(i.to_i).to_date }
  res.uniq.collect{|d| [d,res.count(d)] }
end

class String
  def color(code)
    "\e[#{code}m" + self + "\e[m"
  end
end

class YearStat
  MONTHS = %w{Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec}
  WDAYHEADINGS = {1 => 'M', 3 => 'W', 5 => 'F'}
  BLOCK_CHAR = %w{◼  ▣  ⬚  ⬜  ▤  ⬛  }
  if ENV['BLOCK_COLOR']
    BLOCK_COLOR = ENV['BLOCK_COLOR'].split(" ")
  else
    BLOCK_COLOR = %w{30 38;5;157 38;5;155 38;5;47 38;5;2}
  end

  def initialize(data, opts = {})
    data.map! { |d, v|
      d = Date.parse(d) unless d.is_a? Date
      v = v.to_i  unless v.is_a? Fixnum
      [d, v]
    }
    @opts = { padding: 4, summary: false }.merge opts
    @today = Date.today
    @data = data
  end

  def to_s
    # color code each block
    lines = transposed_weeks.map do |line|
      line.map { |d| block(d) }.join
    end
    # add vertical weekday title
    lines = lines.map.with_index{|l, i|
      heading = WDAYHEADINGS.fetch(i, nil)
      ( heading || ' ') + ' ' + l
    }
    # add month heading title
    month_heading = ''
    sundays = transposed_weeks.first
    sundays.each_index do |i|
      day = sundays[i]
      next if (day - 7).mon == day.mon
      col_num = 2 + i * 2
      month_heading << ' ' * (col_num - month_heading.size) + MONTHS[day.mon - 1]
    end
    lines.unshift month_heading
    # apply prefix padding
    if @opts[:columns]
      padding = ( @opts[:columns] - lines[1].gsub(/\e[^m]*m/,'').size ) / 2
    else
      padding = @opts[:padding]
    end
    lines.map!{|l| ' ' * padding + l }
    # remove redudant color code
    lines.map!{|l|
      while %r{(\e\[[^m]+m)([^\e]+?)\e\[m\1}.match l
        l = l.gsub(%r{(\e\[[^m]+m)([^\e]+?)\e\[m\1},'\1\2')
      end
      l
    }
    lines.join("\n")
  end

  def summary
    "\tTotoal count: #{@data.map(&:last).inject(:+)}"
  end

  def self.format(data, opts = {})
    summary = opts.delete(:summary)
    s = YearStat.new(data, opts)
    summary ? [s.to_s, s.summary].join("\n\n") : s.to_s
  end

  private

  def days
    return @days  if @days
    @days = 365
    if @opts[:columns]
      avail_days = ( @opts[:columns] - @opts[:padding]*2 - 4 )/2 * 7
      @days = avail_days > 365 ? 365 : avail_days
    end
  end

  def first_day
    @first_day ||= @today - days
  end

  def first_block
    return @first_block   if @first_block
    first_wday = first_day.wday
    @first_block = ( first_wday == 0 ? first_day : ( first_day - first_wday ) )
  end

  def transposed_weeks
    return @transposed_weeks if @transposed_weeks
    @transposed_weeks = [ ]
    7.times do |i|
      @transposed_weeks[i] = []
      day = first_block + i
      until day > @today
        @transposed_weeks[i] << day
        day += 7
      end
    end
    @transposed_weeks
  end

  def block(day)
    # a space must be added to the char, otherwise it is fucked up in iterm
    (block_char(day) + ' ').color(day_color day )
  end

  def step_size
    return @step_size  if @step_size
    f = @data.map(&:last).max / step.to_f
    @step_size = f.zero? ? 1.0 : f
  end

  def step
    @step ||= BLOCK_COLOR.size - 1
  end

  def block_char(day)
    day < first_day ? ' ' : BLOCK_CHAR.first
  end

  def day_color(day)
    c = BLOCK_COLOR[quartile(day)]
    day.next.mon != day.mon ? "#{c};4" : c
  end

  def quartile(day)
    return 0  if data(day).zero?
    q = data(day) / step_size + 1
    q == (step + 1) ? step : q.to_i
  end

  def data(d)
    @data_hash ||= Hash[@data]
    @data_hash.fetch(d, 0)
  end
end

if __FILE__ == $0
  require 'optparse'
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"
    options[:columns] = `tput cols`.to_i
    opts.on('-s','--shell COLUMNS', Integer,
            'Centeralize in terminal') {|i| options[:columns] = i }
  end.parse!

  if ARGF.filename != "-" or (not STDIN.tty? and not STDIN.closed?)
    data = ARGF.readlines.map{|l| l.split(/\s+/)}
  else
    data = git_stat
  end
  puts YearStat.format(data, summary: true, columns: options[:columns])
end

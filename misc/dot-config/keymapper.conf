# vim: fdm=marker

# settings {{{
@allow-unmapped-commands
# otherwise backspace would not work
@macos-toggle-fn
@forward-modifiers Shift Control
@options verbose

# device matchers
KeyboardLogitechWave = /Logitech USB Receiver/i
KeyboardThinkpadX1C  = /AT Translated Set 2 keyboard/i

# sequence definitions
Combo  = $0{!150ms} !250ms $1{!150ms}
Double = $0 !200ms $0
Press  = $0{!200ms}
Nested = $0 !$0

# alias
Win        = Meta
Cmd        = Meta
Ctrl       = Control
CmdL       = MetaLeft
CmdR       = MetaRight
AltL       = AltLeft
AltR       = AltRight
CtrL       = ControlLeft
CtrR       = ControlRight
ShiftL     = ShiftLeft
ShiftR     = ShiftRight
Hyper      = (Control Meta Alt Shift)
Modifier   = Control | Meta | Shift | Alt

ViMode       = Virtual
AltLayout    = Virtual
ScreenLayout = Virtual
# }}}

# {{{ functions
message = $(osascript -e 'display notification "$0" with title "KeyMapper"')
km      = $(osascript -e 'tell application "Keyboard Maestro Engine" to do script "$0"') ^
app     = $(open -a "$0") ^
anybar  = $(osascript -e 'tell application "AnyBar" to set image name to "$0"')
# }}}

# {{{ device specific basic key overrides
# Right option to Control for logitech wave keys
[ device = KeyboardLogitechWave ]
  AltR >> CtrR

[device = KeyboardThinkpadX1C ]
  AltR >> CmdR
  AltL >> CmdL
  CmdL >> AltL
  CmdR >> CtrlR

[stage]
# }}}

[default]
  # CapsLock to esc when tapped
  # Prevent CapsLock from being used
  Press[CapsLock] >> Escape
  CapsLock >>

[modifier = "CapsLock"]
  H        >> ArrowLeft
  J        >> ArrowDown
  K        >> ArrowUp
  L        >> ArrowRight
  U        >> prev_tab
  O        >> next_tab
  I        >> PageUp
  Comma    >> PageDown
  PageUp   >> AudioVolumeUp
  PageDown >> AudioVolumeDown
  Any      >> !CapsLock Hyper{Any}

[system = 'Linux' class != 'kitty' ]
  Cmd{Z} >> Ctrl{Z}
  Cmd{X} >> Ctrl{X}
  Cmd{C} >> Ctrl{C}
  Cmd{V} >> Ctrl{V}
  Cmd{F} >> Ctrl{F}

# {{{ common bindings
#
# choose tab
[default]
  Meta{K} >> choose_tab

# }}}

# mode bindings {{{
[modifier = "AltLayout"]
  # Gallium v2
  # tab   b l d c v   j y o u ,   -
  # ctrl  n r t s g   p h a e i   /
  # \     q x m w z   k f ' ; .   enter

  ContextActive >> alt_layout

  Q >> B
  W >> L
  E >> D
  R >> C
  T >> V
  Y >> J
  U >> Y
  I >> O
  O >> U
  P >> Comma

  A   >> N
  S   >> R
  D   >> T
  F   >> S
  G   >> G
  H   >> P
  J   >> H
  K   >> A
  L   >> E
  ';' >> I

  Z >> X
  X >> Q
  C >> M
  V >> W
  B >> Z
  N >> K
  M >> F

# [modifier = "!Modifier" ]
#   Space{180ms} >> !Space ViMode ^ ViMode
#   Space{!180ms} >> Space
#
# Space{K !K} is permissive hold aka nested tap
[modifier = "!Modifier ViMode" ]
  Nested[H] >> ArrowLeft
  Nested[J] >> ArrowDown
  Nested[K] >> ArrowUp
  Nested[L] >> ArrowRight

  Nested[B] >> back_word
  Nested[W] >> forward_word

  Nested[P] >> paste
  Nested[Y] >> copy
  Nested[D] >> cut

  Nested[U] >> undo

# }}}

# {{{ abstract commands
[default]
  prev_tab     >> F11
  next_tab     >> F12
  paste        >> Ctrl{V}
  copy         >> Ctrl{C} 20ms ArrowRight
  cut          >> Ctrl{X}
  back_word    >> Alt{ArrowLeft}
  forward_word >> Alt{ArrowRight}
  go_to_end    >>
  go_to_start  >>
  go_to_top    >>
  go_to_bottom >>
  undo         >>
  alt_layout   >> anybar["red"] ^ anybar["hollow"]
# }}}

[stage]

# {{{ context dependent bindings
#
[ system = 'Linux' ]
  Cmd{D}        >> $(xdotool search --class kitty windowactivate key "super+d") ^
  Cmd{M}        >> $(xdotool search --class kitty windowactivate key "super+m") ^
  Cmd{Z}        >> $(xdotool search --class kitty windowactivate key "super+z") ^
  Hyper{Enter}  >> $(xdotool search --class kitty windowactivate key "ctrl+alt+shift+super+Return") ^
  Hyper{M}      >> ScreenLayout
  Hyper{V}      >> $(gpaste-client ui) ^

[ modifier = "ScreenLayout" ]
  H >> $(xdotool getactivewindow windowsize 50% 100% windowmove 0 y) ^ ScreenLayout
  L >> $(xdotool getactivewindow windowsize 50% 100% windowmove 50% y) ^ ScreenLayout
  F >> $(xdotool getactivewindow windowsize 100% 100% windowmove 0 0) ^ ScreenLayout
  K >> $(xdotool getactivewindow windowsize 100% 50% windowmove 0 0) ^ ScreenLayout
  J >> $(xdotool getactivewindow windowsize 100% 50% windowmove 100% 50%) ^ ScreenLayout
  Any >> ScreenLayout

[system = "MacOS"]
  paste        >> Cmd{V}
  copy         >> Cmd{C} 20ms ArrowRight
  cut          >> Cmd{X}
  back_word    >> Alt{ArrowLeft}
  forward_word >> Alt{ArrowRight}
  go_to_end    >> Cmd{ArrowRight}
  go_to_start  >> Cmd{ArrowLeft}
  go_to_top    >> Cmd{ArrowUp}
  go_to_bottom >> Cmd{ArrowDown}
  undo         >> Cmd{Z}

  # tap right command to open terminal
  Double[CmdL] >> app["kitty"]

  # tap left command twice to open Vivaldi
  Double[CmdR] >> app["Vivaldi"]

  # tap left shift to delete world left
  ShiftLeft >> Alt{Backspace}

[class = /vivaldi/i ]
  Cmd{8} >> (AltL Shift){L}

[system = "Linux" class = /vivaldi/i ]
  Cmd{K} >> Ctrl{K}
# }}}

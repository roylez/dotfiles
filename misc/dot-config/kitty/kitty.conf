# vim:fileencoding=utf-8:ft=conf

# You can include secondary config files via the "include" directive.
# If you use a relative path for include, it is resolved with respect to the
# location od the current config file. For example:
# include other.conf

# Fonts {{{
# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants. By default they are derived automatically,
# by the OSes font system. Setting them manually is useful for font families
# that have many weight variants like Book, Medium, Thick, etc. For example:
# font_family Operator Mono Book
# bold_font Operator Mono Medium
# italic_font Operator Mono Book Italic
# bold_italic_font Operator Mono Medium Italic
#
# You can get a list of full family names available on your computer by running
# kitty list-fonts
# The default values shown below rely on your OS to choose an appropriate monospace font family.

# brew install homebrew/cask-fonts/font-lxgw-wenkai
symbol_map U+3000-U+30ff,U+4e00-U+9fff LXGW WenKai Mono
# brew install homebrew/cask-fonts/font-symbols-only-nerd-font
# usually symbol_map is not needed
symbol_map U+e000-U+e00a,U+ea60-U+ebeb,U+e0a0-U+e0c8,U+e0ca,U+e0cc-U+e0d4,U+e200-U+e2a9,U+e300-U+e3e3,U+e5fa-U+e6b1,U+e700-U+e7c5,U+f000-U+f2e0,U+f300-U+f372,U+f400-U+f532,U+f0001-U+f1af0 Symbols Nerd Font Mono

# Font size (in pts)
font_size        17

inactive_text_alpha 0.6

disable_ligatures always

# Adjust the cell dimensions.
# You can use either numbers, which are interpreted as pixels or percentages
# (number followed by %), which are interpreted as percentages of the
# unmodified values. You can use negative pixels or percentages less than
# 100% to reduce sizes (but this might cause rendering artifacts).
adjust_line_height 0
adjust_column_width 0

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

# Change the sizes of the lines used for the box drawing unicode characters
# These values are in pts. They will be scaled by the monitor DPI to arrive at
# a pixel value. There must be four values corresponding to thin, normal, thick,
# and very thick lines;
box_drawing_scale 0.001, 1, 1.5, 2

# }}}

# Cursor customization {{{
# The cursor color
# cursor           #ACEA5C

# The cursor shape can be one of (block, beam, underline)
cursor_shape     beam

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking. Note that numbers smaller than repaint_delay will be
# limited to repaint_delay.
cursor_blink_interval     0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero to never stop blinking.
cursor_stop_blinking_after 15.0
# }}}

# Scrollback {{{
# Number of lines of history to keep in memory for scrolling back
scrollback_lines 10000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
scrollback_pager less +G -R

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 5.0
# }}}

# Mouse {{{
# The color and style for highlighting URLs on mouse-over. url_style can be one of:
# none, single, double, curly
# url_color #F4E04D
url_style curly

show_hyperlink_targets yes

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# Copy to clipboard on select. With this enabled, simply selecting text with
# the mouse will cause the text to be copied to clipboard. Useful on platforms
# such as macOS/Wayland that do not have the concept of primary selections. Note
# that this is a security risk, as all programs, including websites open in your
# browser can read the contents of the clipboard.
copy_on_select yes

# allow writing to clipboard
clipboard_control write-clipboard write-primary no-append

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 3.0

# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse yes

# Remove spaces at the end of lines when copying to clipboard. A value of smart will do it when
# using normal selections, but not rectangle selections. A value of always will always do it.
strip_trailing_spaces smart
# }}}

# Options {{{

# The shell program to execute. The default value of . means
# to use whatever shell is set as the default shell for the current user.
# Note that on macOS if you change this, you might need to add --login to
# ensure that the shell starts in interactive mode and reads its startup rc files.
shell .

editor .

shell_integration no-title

# do not check for updates
update_check_interval 0

# Close the window when the child process (shell) exits. If no (the default),
# the terminal will remain open when the child exits as long as there are still
# processes outputting to the terminal (for example disowned or backgrounded
# processes). If yes, the window will close as soon as the child process exits.
# Note that setting it to yes means that any background processes still using
# the terminal can fail silently because their stdout/stderr/stdin no longer
# work.
close_on_child_death no

# Allow other programs to control kitty. If you turn this on other programs can
# control all aspects of kitty, including sending text to kitty windows,
# opening new windows, closing windows, reading the content of windows, etc.
# Note that this even works over ssh connections.
allow_remote_control yes
listen_on unix:/tmp/kitty

# The value of the TERM environment variable to set. Changing this can break
# many terminal programs, only change it if you know what you are doing, not
# because you read some advice on Stack Overflow to change it.
term xterm-kitty

# no confirmation needed to close
confirm_os_window_close 0

# cursor trail to highlight cursor movements
# cursor_trail 1
# cursor_trail_decay 0.1 0.3

# paste filters
paste_actions replace-dangerous-control-codes

startup_session default_session.conf

exe_search_path ~/.config/kitty/bin
# }}}

# Performance tuning {{{
# Delay (in milliseconds) between screen updates. Decreasing it, increases
# frames-per-second (FPS) at the cost of more CPU usage. The default value
# yields ~100 FPS which is more than sufficient for most uses. Note that to
# actually achieve 100FPS you have to either set sync_to_monitor to no or use a
# monitor with a high refresh rate.
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed. Note that decreasing it will increase responsiveness, but also
# increase CPU usage and might cause flicker in full screen programs that
# redraw the entire screen on each loop, because kitty is so fast that partial
# screen updates will be drawn.
input_delay 3

# Sync screen updates to the refresh rate of the monitor. This prevents
# tearing (https://en.wikipedia.org/wiki/Screen_tearing) when scrolling. However,
# it limits the rendering speed to the refresh rate of your monitor. With a
# very high speed mouse/high keyboard repeat rate, you may notice some slight input latency.
# If so, set this to no.
sync_to_monitor no
# }}}

# Audio/visual bell {{{
# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell yes
# }}}

# Window layout {{{
# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the README.
enabled_layouts fat:bias=60,stack,tall:bias=50

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
# Note that borders are displayed only when more than one window is visible. They are meant to separate multiple windows.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
# window_margin_width 2

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 2

background_opacity 0.76
background_blur 10
hide_window_decorations titlebar-only
# }}}

# Tab bar {{{
# Which edge to show the tab bar on, top or bottom
tab_bar_edge top
tab_bar_align left
tab_separator ""
tab_bar_style custom
# tab_bar_style separator
tab_title_template "{index}{fmt.fg._c1121f}{sup.num_windows if num_windows>1 else ''} {fmt.fg.tab}{title} "
tab_bar_margin_height 3.0 1.0

# Tab bar colors and styles
active_tab_font_style bold
inactive_tab_font_style normal
# active_tab_foreground   #000
# active_tab_background   #eee
# inactive_tab_foreground #444
# inactive_tab_background #999
# tab_bar_background #003747

# always show
tab_bar_min_tabs 1
# }}}

# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts.
kitty_mod super
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map kitty_mod+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard / Select and act on visible text {{{
map kitty_mod+v        paste_from_clipboard
map kitty_mod+s        paste_from_selection
map kitty_mod+c        copy_to_clipboard
map shift+insert        paste_from_selection

action_alias hints kitten hints --hints-background-color bright-red

map kitty_mod+o>u       hints --window-title "OPEN URL" --hints-text-color bright-blue
map kitty_mod+o>l       hints --window-title "EDIT LINE" --type linenum --program $EDITOR
# Select OSC hyperlink
map kitty_mod+o>f       hints --window-title "OPEN FILE" --type hyperlink --hints-text-color bright-cyan

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
map kitty_mod+p>f       hints --window-title "COPY PATH" --hints-text-color bright-cyan --type path --program -
# Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f hints --window-title "OPEN PATH" --hints-text-color bright-cyan --type path
# Select a line of text and insert it into the terminal. Use for the
map kitty_mod+p>l       hints --window-title "COPY LINE" --type line --program -
# Select words and insert into terminal.
map kitty_mod+p>w       hints --window-title "COPY WORD" --type word --program -

# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten ~/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py

# Browse scrollback buffer in nvim
map --when-focus-on "not title:tmux" kitty_mod+h    kitty_scrollback_nvim
# Browse output of the last shell command in nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
# Show clicked command output in nvim
mouse_map kitty_mod+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output

# }}}

# Scrolling {{{
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
# }}}

# Layout management {{{
map alt+space          kitten toggle_term.py
# }}}

# Window management {{{
action_alias launch_tab remote_control_script kitty_toggle_or_launch
action_alias notify kitten notify

map --when-focus-on "not title:tmux" kitty_mod+enter  new_window_with_cwd
map --when-focus-on "not title:tmux" ctrl+h           neighboring_window left
map --when-focus-on "not title:tmux" ctrl+j           neighboring_window bottom
map --when-focus-on "not title:tmux" ctrl+k           neighboring_window top
map --when-focus-on "not title:tmux" ctrl+l           neighboring_window right
map kitty_mod+n       no_op
map kitty_mod+w       close_window
map kitty_mod+`       move_window_to_top
map kitty_mod+shift+r combine            : load_config_file : notify Kitty "Config Reloaded!"

map kitty_mod+i       toggle_marker iregex 3 \\bERROR\\b 2 \\bWARN 1 \\bDEBUG\\b

# easy copying command outputs
mouse_map right press ungrabbed mouse_select_command_output

# }}}

# Tab management {{{
map kitty_mod+right
map kitty_mod+left
map f11                 previous_tab
map f12                 next_tab
map kitty_mod+t         new_tab
map kitty_mod+q         close_tab
map kitty_mod+l         next_layout
map kitty_mod+.         move_tab_forward
map kitty_mod+,         move_tab_backward
map kitty_mod+backspace goto_tab 0
map kitty_mod+1         goto_tab 1
map kitty_mod+2         goto_tab 2
map kitty_mod+3         goto_tab 3
map kitty_mod+4         goto_tab 4
map kitty_mod+5         goto_tab 5
map kitty_mod+6         goto_tab 6
map kitty_mod+7         goto_tab 7
map kitty_mod+k         launch   --allow-remote-control --type=overlay-main --title="CHOOSE WINDOW" kitty_fzf_win

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Font sizes {{{
# map kitty_mod+equal    increase_font_size
# map kitty_mod+minus    decrease_font_size
# map kitty_mod+backspace restore_font_size
map kitty_mod+equal     no_op
map kitty_mod+minus     no_op
# To setup shortcuts for specific font sizes, follow the example below:
# map kitty_mod+f6     set_font_size 10.0
# map kitty_mod+f7     set_font_size 20.5
# }}}

# Miscellaneous {{{
map ctrl+alt+shift+command+enter     launch --allow-remote-control --type=overlay --title="ACTIONS" kitty_fzf_action

map kitty_mod+shift+a launch --type=window --hold --title="AI Explain" --stdin-source=@selection kitty_ai_linux_analysis
map kitty_mod+f       launch --type=overlay zsh -ic "lf ~/Downloads"
map kitty_mod+m       launch_tab --tab 0 --title MUTT ssh -t limbo zsh -ic 'neomutt -F .mutt/muttrc -F .mutt/account/work'
map kitty_mod+/       launch_tab --tab 0 --title DOC --color ~/.config/kitty/man-page.conf ssh -t limbo zsh -ic fzf_devdoc
map kitty_mod+d       launch_tab --tab 0 --title TODO nvim "~/wiki/TODO.md"
map kitty_mod+z       launch_tab --tab 0 --title WIKI kitty_wiki

# tmux
# choose tree
map --when-focus-on title:tmux kitty_mod+k            send_key ctrl+a space
# window switching
map --when-focus-on title:tmux kitty_mod+[            send_key ctrl+a ,
map --when-focus-on title:tmux kitty_mod+]            send_key ctrl+a .
map --when-focus-on title:tmux alt+ctrl+super+shift+m send_key ctrl+a ,
map --when-focus-on title:tmux alt+ctrl+super+shift+. send_key ctrl+a .
# splitting
map --when-focus-on title:tmux kitty_mod+enter        send_key ctrl+a |
# scrollback
map --when-focus-on title:tmux kitty_mod+h            send_key ctrl+a [

# REPL editor callouts
map --when-focus-on 'cmdline:zsh or cmdline:bash' kitty_mod+e send_key ctrl+x ctrl+e
map --when-focus-on 'title:aichat' kitty_mod+e send_key ctrl+o
map --when-focus-on 'title:iex' kitty_mod+e send_key escape o
# }}}

# }}}

# {{{ Kitty managed section
# BEGIN_KITTY_THEME
# Japanesque
include current-theme.conf
# END_KITTY_THEME
# Non-portable stuff
include ${KITTY_OS}.conf

# use this to change fonts
#
#   kitty list-fonts
#
# BEGIN_KITTY_FONTS
font_family      family="Iosevka Term"
bold_font        auto
italic_font      auto
bold_italic_font auto
# END_KITTY_FONTS
# }}}

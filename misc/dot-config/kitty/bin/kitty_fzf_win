#!/usr/bin/env sh

windows=$(kitty @ ls -m 'not state:self ' | jq -r '
    .[]
    | .id as $os_win_id
    | .tabs[] += { tab_len: (.tabs|length) }
    | .tabs[]
    | .id as $tab_id
    | .tab_len as $tab_len
    | .windows[] += { tab_id: $tab_id, os_win_id: $os_win_id, win_len: (.windows|length), tab_len: $tab_len }
    | .windows[]
    | [.os_win_id, .tab_id, .id, .tab_len, .win_len, .title  ]
    | @tsv
    ' |\awk -F"\t" '
      os_win == $1 && tab == $2 {j++}               # same os_win and same tab, only window changes
      os_win == $1 && tab != $2 {j=1; i++; tab=$2}  # next tab
      os_win != $1 {i=1; j=1; os_win=$1; tab=$2}    # next os_win


      {
        printf $3"\t"
        first_tab = i == 1
        first_win = j == 1
        last_tab = i == $4
        last_win = j == $5
      }

      # os_win, print "─" for first tab first win
      first_tab && first_win    { printf "─" }
      !(first_tab && first_win) { printf " " }

      # tab
      first_tab && last_tab  && first_win     { printf "──" }
      first_tab && last_tab  && !first_win     { printf "  " }
      first_tab && !last_tab && first_win    { printf "┬─" }
      first_tab && !last_tab && !first_win    { printf "│ " }
      !first_tab && !last_tab && first_win   { printf "├─" }
      !first_tab && last_tab && first_win    { printf "└─" }
      !first_tab && !first_win    { printf "│ " }

      # win
      first_win && last_win      { printf "──" }   # single
      first_win && !last_win     { printf "┬─" }   # first
      !first_win && !last_win    { printf "├─" }   # middle
      !first_win && last_win     { printf "└─" }   # last

      {print "\t"$1":"$2"\t"$6}
      ' | column -ts $'\t'
    )

window_id=$(fzf --prompt="CHOOSE WINDOW OR TAB> " --nth=1,4 --reverse <<< "${windows}" | awk '{ print $1 }')

kitty_selector="id:${window_id}"

kitty @ focus-window -m $kitty_selector

title=$(kitty @ ls -m $kitty_selector |jq -r '.[0].tabs[0].title')

if [[ "$title" = *tmux* ]]; then
  kitty @ send-key -m $kitty_selector ctrl+a space
fi

# vim: ft=conf
#
# :  read (default)  builtin/custom command
# $  shell           shell command
# %  shell-pipe      shell command running with the ui
# !  shell-wait      shell command waiting for key press
# &  shell-async     shell command running asynchronously
#

set shell zsh
set shellopts '-ey'
set drawbox true
set tabstop 4
# mc style
set nopreview
set ratios 1:2
set info size:time
#set icons on
# automatically reload every 2 seconds
set period 2
# set icons on

# CUSTOM COMMANDS
#
cmd open ${{
  case $(file --mime-type -bL "$f"):${f:t:e} in
    text/x-*|application/json:*) $EDITOR "$f";;
    text/*) $PAGER "$f";;
    *:pages) $OPENER "$f";;
    application/x-tar:*) lf -remote "send $id untar" ;;
    application/x-7z*) lf -remote "send $id untar" ;;
    application/*zip:*) lf -remote "send $id untar" ;;
    application/x-rar:*) lf -remote "send $id untar" ;;
    *) $OPENER "$f";;
  esac
}}

cmd fzf_jump ${{
  dir=${lf_user_root:-$PWD}
  res="$(fd -t d --base-directory $dir |fzf --info=inline --prompt='> JUMP TO:  ')" || true
  if [ -d "$res" ]; then
    cmd="cd"
  else
    cmd="select"
  fi
  lf -remote "send $id $cmd '$dir/$res'"
}}

cmd fzf_select ${{
  dir=${lf_user_root:-$PWD}
  res="$(fd -t f --base-directory $dir |fzf --info=inline --prompt='> FILE:  ')" || true
  # The problem is that lf loads directories asynchronously, if it hasn't been visited before. This
  # means that if you try to open the file immediately after using select, lf will have changed to
  # the containing directory, but $f is empty because the contents of that directory have not been
  # loaded yet.
  lf -remote "send $id :select '$dir/$res'"
}}

cmd fzf_change_root &{{
  lf -remote "send $id :set user_root $PWD"
  lf -remote "send $id :echomsg => FZF root (lf_user_root) changed to '$PWD'"
}}

cmd autojump %{{
  lf -remote "send $id cd '$(zoxide query $1)'"
}}

cmd untar !{{
  case "$f" in
    *.tar.*)           tar   xvf "$f";;
    *.tar)             tar   xvf "$f";;
    *.zip|*.7z|*.lzma) 7z    x   "$f";;
    *.ZIP|*.7Z|*.LZMA) 7z    x   "$f";;
    *.rar)             unrar x   "$f";;
    *)                 echo  "Not an archive file!";;
  esac

}}

cmd tar %{{
  printf " Archive file name: "
  read name
  [[ -z "${name##*.tar.*}" ]] || name=$name.tar.gz
  lf -remote "send $id unselect \"$fx\""
  tar acf "$name" $(basename -a $fx)
}}

cmd make_file %{{
  echo -n " [NEW FILE] Enter a file name: "
  read name
  if [[ "$name" == */ ]]; then
    mkdir -p "$name"
  else
    lf -remote "send $id \$$EDITOR $name"
  fi
}}

cmd delete %{{ rm -rf "$fx" }}

cmd vidir ${{ vidir }}

cmd scp_to &{{
  scp -r "$fx" $1
  lf -remote "send $id echo ==> $fx copied to $1"
  }}

# MAPPINGS
#
# Defaults
#
# map zh set hidden!
# map zr set reverse!
# map zn set info
# map zs set info size
# map zt set info time
# map za set info size:time
# map sn :set sortby natural; set info
# map ss :set sortby size; set info size
# map st :set sortby time; set info time
# map sa :set sortby atime; set info atime
# map sc :set sortby ctime; set info ctime
# map se :set sortby ext; set info
# map gh cd ~
# map <space> :toggle; down

# overrides
#
map zh
map zr
map zn
map zs
map zt
map za
map sh set hidden!
map ss set sortby size
map st :set sortby time; set info size:time
map sa :set sortby atime; set info size:atime
map sc :set sortby ctime; set info size:ctime
map se set sortby ext

map <enter> shell
map A tar
map a make_file
map x delete
map R vidir

# map z<space> push :autojump<space>
map Z fzf_jump
map o fzf_select
map . fzf_change_root

map Tl :scp_to limbo:tmp
map Ts :scp_to cs:tmp
